<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	    
    
    <!-- 扫描包   基于注解的方式   -->
    <context:component-scan base-package="com.ry.controllers" />
    <context:component-scan base-package="com.ry.serviceImpl"/>
    <context:component-scan base-package="com.ry.dao"/>
    <mvc:annotation-driven />
    
    
    
    
    <!-- 文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<!-- 最大不超过1M -->
		<property name="maxUploadSize" value="1048576"></property>
	</bean>
    
    
    <!-- 配置视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    	<property name="prefix" value="/WEB-INF/jsp/"></property>
    	<property name="suffix" value=".jsp"></property>
    </bean>
    
    <!-- 静态资源的文件访问   由于这里大量的js不是我制定的 ，所以在web.xml中 不能用/ 避免找不到文件-->
	<!-- <mvc:resources location="/bower_components/**" mapping="/bower_components/"  cache-period="2592000" />
    <mvc:resources location="/build/**" mapping="/build/"   cache-period="2592000"/>
    <mvc:resources location="/dist/**" mapping="/dist/"  cache-period="2592000" />
    <mvc:resources location="/documentation/**" mapping="/documentation/"  cache-period="2592000" />
     -->
    
     
     
	<!-- 对静态资源文件的访问  方案一 （二选一） -->  
    <mvc:default-servlet-handler/>  
	
	<!-- 注册SUstemLogAspect 用于日志记录 -->
	<context:component-scan base-package="com.ry.annotation" />
	
	<!-- 启动对@AspectJ注解的支持 -->
	<aop:aspectj-autoproxy />
	<!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller-->
	<aop:aspectj-autoproxy proxy-target-class="true" /> 
	
	
	 
	 
	<!-- 导入Redis配置 -->
	<!-- <import resource="redisConfig.xml"/>  -->
    
	
	<!-- jedis pool配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	<!--最大连接数-->  
	<property name="maxTotal" value="100" />
	<!--最大空闲连接数-->  
	<property name="maxIdle" value="100" />
	<!--初始化连接数-->  
	<property name="minIdle" value="10"/>  
	<!--最大等待时间-->
	<property name="maxWaitMillis" value="1000" />
	<!--对拿到的connection进行validateObject校验-->  
	<property name="testOnBorrow" value="false" />
	<!--在进行returnObject对返回的connection进行validateObject校验-->
	<property name="testOnReturn" value="false" />  
	<!--定时对线程池中空闲的链接进行validateObject校验-->  
	<property name="testWhileIdle" value="true" />  
		
	</bean>
	

	<!-- 生产环境配置 -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy" >
		<constructor-arg index="0" ref="jedisPoolConfig"/>  
        <constructor-arg index="1" value="127.0.0.1"/>  
        <constructor-arg index="2" value="6379"/>  
        <constructor-arg index="3" value="100000"/>  
        <constructor-arg index="4">  
            <null></null>  
        </constructor-arg>  
        <constructor-arg index="5" value="0"/>
	</bean>
    
    
    
    
    <!-- 与mybatis整合 -->
    
    <!-- 引入配置文件 -->
    <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="location" value="classpath:resources/jdbc.properties"></property>
    </bean>  -->
     
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
    	<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
    	<property name="url" value="jdbc:mysql://localhost:3306/myproject1"></property>
    	<property name="username" value="root"></property>
    	<property name="password" value="root"></property>
    </bean>

	<!-- spring 和 MyBatis 完美整合 ，不再需要MaBatis配置文件  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 用于分页从而进行添加的 -->
		<property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
		
		<property name="mapperLocations" value="classpath:com/ry/mapper/*Mapper.xml"></property>
		
	</bean>  
    
    <!-- dao接口所在的包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="basePackage" value="com.ry.dao"></property>
    	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
    <!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean> 
	
	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 匹配的是url路径，如果不配置或/**，将拦截所有的Controller -->
			<mvc:mapping path="/**" />
			<!-- 拦截器类 -->
			<bean class="com.ry.interceptors.LoginInterceptor" />
		</mvc:interceptor>
	<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，
		然后逆序调用每个拦截器的postHandle和afterCompletion方法
	 -->
	</mvc:interceptors>
	
	
	
	
	
	
    </beans>