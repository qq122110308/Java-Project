<?xml version="1.0" encoding="UTF-8"?>  
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:p="http://www.springframework.org/schema/p"    
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans.xsd   
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd  
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd"
    >   
    
    <!-- 扫描包   基于注解的方式   -->
    <context:component-scan base-package="com.ry.controllers" />
    <context:component-scan base-package="com.ry.serviceImpl"/>
    <context:component-scan base-package="com.ry.dao"/>
    <mvc:annotation-driven />
    
    
    <!-- 文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<!-- 最大不超过1M -->
		<property name="maxUploadSize" value="1048576"></property>
	</bean>
    
    
    <!-- 配置视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    	<property name="prefix" value="/WEB-INF/jsp/"></property>
    	<property name="suffix" value=".jsp"></property>
    </bean>
    
    <!-- 静态资源的文件访问   由于这里大量的js不是我制定的 ，所以在web.xml中 不能用/ 避免找不到文件-->
	<!-- <mvc:resources location="/bower_components/**" mapping="/bower_components/"  cache-period="2592000" />
    <mvc:resources location="/build/**" mapping="/build/"   cache-period="2592000"/>
    <mvc:resources location="/dist/**" mapping="/dist/"  cache-period="2592000" />
    <mvc:resources location="/documentation/**" mapping="/documentation/"  cache-period="2592000" />
     -->
     
     
	<!-- 对静态资源文件的访问  方案一 （二选一） -->  
    <mvc:default-servlet-handler/>  
	
	 
    
    <!-- 与mybatis整合 -->
    
    <!-- 引入配置文件 -->
    <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="location" value="classpath:resources/jdbc.properties"></property>
    </bean>  -->
     
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
    	<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
    	<property name="url" value="jdbc:mysql://localhost:3306/myproject1"></property>
    	<property name="username" value="root"></property>
    	<property name="password" value="root"></property>
    </bean>

	<!-- spring 和 MyBatis 完美整合 ，不再需要MaBatis配置文件  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 用于分页从而进行添加的 -->
		<property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
		
		<property name="mapperLocations" value="classpath:com/ry/mapper/*Mapper.xml"></property>
		
	</bean>  
    
    <!-- dao接口所在的包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="basePackage" value="com.ry.dao"></property>
    	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
    <!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean> 
	
	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 匹配的是url路径，如果不配置或/**，将拦截所有的Controller -->
			<mvc:mapping path="/**" />
			<!-- 拦截器类 -->
			<bean class="com.ry.interceptors.LoginInterceptor" />
		</mvc:interceptor>
	<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，
		然后逆序调用每个拦截器的postHandle和afterCompletion方法
	 -->
	</mvc:interceptors>
	
	
	
	
	
	
    </beans>