<?xml version="1.0" encoding="utf-8"?>  
<!-- configuration的以下属性 scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。   
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->  
<configuration debug="false">  
    <contextName>Logbackwebadmin</contextName>  
      
    <!-- 引入antx_admin.properties文件 -->  
    <property resource="resources/antx_admin.properties" />  
    <!-- 定义日志的根目录 -->  
    <property name="log_home" value="${logback.path}"/>  
  
    <!-- 控制台输出 -->  
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">  
        <!-- encoder默认配置为PartternLayoutEncoder -->  
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">  
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} -  
                %msg%n</pattern>  
        </encoder>  
    </appender>  
  
    <appender name="service"  
        class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <Encoding>UTF-8</Encoding>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <!--日志文件输出的文件名 -->  
            <FileNamePattern>${log_home}/weiquanlogs/service/service-%d{yyyy-MM-dd}.%i.log  
            </FileNamePattern>  
            <!--日志文件保留天数 -->  
            <MaxHistory>30</MaxHistory>  
            <!-- 按时间回滚的同时，按文件大小来回滚 -->  
            <timeBasedFileNamingAndTriggeringPolicy  
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
                <!--日志文件最大的大小 -->  
                <maxFileSize>10MB</maxFileSize>  
            </timeBasedFileNamingAndTriggeringPolicy>  
        </rollingPolicy>  
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">  
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} -  
                %msg%n</pattern>  
        </encoder>  
        <!--日志文件最大的大小 -->  
        <!-- <triggeringPolicy  
            class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">  
            <MaxFileSize>10MB</MaxFileSize>  
        </triggeringPolicy> -->  
    </appender>  
  
    <!-- 按照每天生成日志文件 -->  
    <appender name="everyday"  
        class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <Encoding>UTF-8</Encoding>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <!--日志文件输出的文件名 %i:起始是0，当第一个文件的大小超过10MB时，变为1，依次类推-->  
            <FileNamePattern>${log_home}/weiquanlogs/all/all-%d{yyyy-MM-dd}.%i.log  
            </FileNamePattern>  
            <!--日志文件保留天数 -->  
            <MaxHistory>30</MaxHistory>  
            <!-- 按时间回滚的同时，按文件大小来回滚 -->  
            <timeBasedFileNamingAndTriggeringPolicy  
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
                <maxFileSize>10MB</maxFileSize>  
            </timeBasedFileNamingAndTriggeringPolicy>  
        </rollingPolicy>  
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">  
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} -  
                %msg%n</pattern>  
        </encoder>  
        <!--日志文件最大的大小 -->  
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">   
            <MaxFileSize>10MB</MaxFileSize> </triggeringPolicy> -->  
    </appender>  
  
    <!-- 精确设置每个包下面的日志 -->  
    <!-- additivity的作用在于 children-logger是否使用 rootLogger配置的appender进行输出。  
         false：表示只用当前logger的appender-ref。  
         true：表示当前logger的appender-ref和rootLogger的appender-ref都有效。 -->  
    <logger name="com.ry.serviceImpl" additivity="true" level="${logback.level}">  
        <appender-ref ref="service" />  
        <appender-ref ref="console" />  
    </logger>  
    <!-- mybatis logback -->  
    <logger name="com.ibatis" level="${logback.level}" />  
    <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="${logback.level}" />  
    <logger name="com.ibatis.common.jdbc.ScriptRunner" level="${logback.level}" />  
    <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate"  
        level="${logback.level}" />  
    <logger name="java.sql.Connection" level="${logback.level}" />  
    <logger name="java.sql.Statement" level="${logback.level}" />  
    <logger name="java.sql.PreparedStatement" level="${logback.level}" />  
    <!-- root节点 -->  
    <root level="${logback.level}">  
        <appender-ref ref="console" />  
        <appender-ref ref="everyday" />  
    </root>  
</configuration>  